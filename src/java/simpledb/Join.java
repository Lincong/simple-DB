package simpledb;

import java.util.*;

/**
 * The Join operator implements the relational join operation.
 */
public class Join extends Operator {

    private static final long serialVersionUID = 1L;

    private OpIterator child1;
    private OpIterator child2;
    private JoinPredicate pred;
    private Tuple currChild1Tuple;
    private Tuple currChild2Tuple;
    private boolean hasTuple;
    private DbLogger logger = new DbLogger(getClass().getName(), getClass().getName() + ".log",true);
    /**
     * Constructor. Accepts two children to join and the predicate to join them
     * on
     * 
     * @param p
     *            The predicate to use to join the children
     * @param child1
     *            Iterator for the left(outer) relation to join
     * @param child2
     *            Iterator for the right(inner) relation to join
     */
    public Join(JoinPredicate p, OpIterator child1, OpIterator child2) {
        // some code goes here
        pred = p;
        this.child1 = child1;
        this.child2 = child2;
        currChild1Tuple = null;
        currChild2Tuple = null;
        hasTuple = false;
    }

    public JoinPredicate getJoinPredicate() {
        // some code goes here
        return pred;
    }

    /**
     * @return
     *       the field name of join field1. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField1Name() {
        // some code goes here
        return child1.getTupleDesc().getFieldName(pred.getField1());
    }

    /**
     * @return
     *       the field name of join field2. Should be quantified by
     *       alias or table name.
     * */
    public String getJoinField2Name() {
        // some code goes here
        return child2.getTupleDesc().getFieldName(pred.getField2());
    }

    /**
     * @see simpledb.TupleDesc#merge(TupleDesc, TupleDesc) for possible
     *      implementation logic.
     */
    public TupleDesc getTupleDesc() {
        // some code goes here
        return TupleDesc.merge(child1.getTupleDesc(), child2.getTupleDesc());
    }

    public void open() throws DbException, NoSuchElementException,
            TransactionAbortedException {
        // some code goes here
        child1.open();
        child2.open();
        currChild1Tuple = child1.next();
        currChild2Tuple = child2.next();
        hasTuple = true;
        super.open();
    }

    public void close() {
        // some code goes here
        child1.close();
        child2.close();
        currChild1Tuple = null;
        currChild2Tuple = null;
        hasTuple = false;
        super.close();
    }

    public void rewind() throws DbException, TransactionAbortedException {
        // some code goes here
        close();
        open();
    }

    /**
     * Returns the next tuple generated by the join, or null if there are no
     * more tuples. Logically, this is the next tuple in r1 cross r2 that
     * satisfies the join predicate. There are many possible implementations;
     * the simplest is a nested loops join.
     * <p>
     * Note that the tuples returned from this particular implementation of Join
     * are simply the concatenation of joining tuples from the left and right
     * relation. Therefore, if an equality predicate is used there will be two
     * copies of the join attribute in the results. (Removing such duplicate
     * columns can be done with an additional projection operator if needed.)
     * <p>
     * For example, if one tuple is {1,2,3} and the other tuple is {1,5,6},
     * joined on equality of the first column, then this returns {1,2,3,1,5,6}.
     * 
     * @return The next matching tuple.
     * @see JoinPredicate#filter
     */
    protected Tuple fetchNext() throws TransactionAbortedException, DbException {
        // some code goes here
        logger.log("In fetchNext()");
        if(!hasTuple)
            return null;

        while(!pred.filter(currChild1Tuple, currChild2Tuple)) {
            if(!updateCurrTuplePair())
                logger.log("return: null");
                return null;
        }
        logger.log("Found matching pair");
        // find the matching tuple pair!
        TupleDesc mergedDesc = TupleDesc.merge(currChild1Tuple.getTupleDesc(), currChild2Tuple.getTupleDesc());
        Tuple t = new Tuple(mergedDesc);
        // set fields
        int i;
        for(i = 0; i < currChild1Tuple.getTupleDesc().numFields(); i++){
            t.setField(i, currChild1Tuple.getField(i));
        }
        for(int j = 0; j < currChild2Tuple.getTupleDesc().numFields(); j++){
            t.setField(i, currChild2Tuple.getField(j));
            i++;
        }
        logger.log("move to the next pair");
        updateCurrTuplePair();
        logger.log("return: " + t.toString());
        return t;
    }

    private boolean updateCurrTuplePair() throws TransactionAbortedException, DbException {
        logger.log("curr tuple 1: " + currChild1Tuple.toString());
        logger.log("curr tuple 2: " + currChild2Tuple.toString());
        if(child2.hasNext()){
            currChild2Tuple = child2.next();
            return true;
        }
        if(!child1.hasNext()) {  // nested iteration is over
            logger.log("No more tuple");
            hasTuple = false;
            return hasTuple;
        }

        currChild1Tuple = child1.next();
        child2.rewind(); // since child2 does not have next so rewind is necessary
        currChild2Tuple = child2.next();
        return true;
    }

    @Override
    public OpIterator[] getChildren() {
        // some code goes here
        OpIterator[] childrenOperators = new OpIterator[2];
        childrenOperators[0] = child1;
        childrenOperators[1] = child2;
        return childrenOperators;
    }

    @Override
    public void setChildren(OpIterator[] children) {
        // some code goes here
        assert children.length == 2;
        child1 = children[0];
        child2 = children[1];
    }
}
